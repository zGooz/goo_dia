<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_bird</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>List = ds_list_create();
Script = ds_list_create();
Active = ds_list_create();
Path = ds_list_create(); 
count = 20;      
exist = 0;
Shift = 0;
var p = path_add(); 
path_set_closed(p, 0);
path_set_kind(p, 1);
path_set_precision(p, 8);   
depth = global.Depth--;                 
kill = 0;             

List[| 0] = " dialog default ";
List[| 1] = " phrase default ";
Script[| 0] = "";
Script[| 1] = "";
Active[| 0] = noone;
Active[| 1] = noone;
Path[| 0] = -1;
Path[| 1] = p;

Size = ds_list_size(List);
height = (Size + 1) * SYM_H;
width = SYM_W * count + 2 * SYM_H;

tplus = sprite_get_texture(spr_bird, 3);
txplus = sprite_get_texture(spr_bird, 1); 
tshift = sprite_get_texture(spr_bird, 5);
tcircle = sprite_get_texture(spr_bird, 4);
tkill_self = sprite_get_texture(spr_bird, 6);
tkill_child = sprite_get_texture(spr_bird, 7);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>refresh_curve();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>visible = point_in_rectangle
          ( x, y, view_xview[view_current], view_yview[view_current], 
            view_xview[view_current] + view_wview[view_current], 
            view_yview[view_current] + view_hview[view_current]
          );

if id != global.ID exit;
if !visible exit;   

if Shift
&amp;&amp; mouse_check_button(mb_left)
{ x = mouse_x - width + (SYM_H &gt;&gt; 1);
  y = mouse_y - height + (SYM_H &gt;&gt; 1);  
  with obj_dialog refresh_curve();
  exit;
}

if !instance_exists(obj_pointer) exit;   
var h = SYM_H &gt;&gt; 1;
var xx = x + count * SYM_W;
xx += SYM_H + h;
var i = obj_pointer.number;

var a = Active[| i];
if is_undefined(a) exit;
var yy = y + SYM_H * i + h;

if instance_exists(a)
{ var p = Path[| i];
  if is_undefined(p) exit;
  if !path_exists(p) exit;       
  refresh_path(p, a, xx, yy);                 
} 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Shift = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if id = global.ID 
{ exist--;
  exit;
}

for (var i = 0; i &lt; Size; i++)
{ var v = Active[| i];
  if is_undefined(v) continue;  
  with v event_user(1); 
}
              
event_user(0);
instance_destroy();       
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for (var i = 0; i &lt; Size; i++)
{ var p = Path[| i];
  if is_undefined(p) continue;  
  if path_exists(p) path_delete(p);  
}

if ds_exists(List, ds_type_list) ds_list_destroy(List);   
if ds_exists(Active, ds_type_list) ds_list_destroy(Active);
if ds_exists(Path, ds_type_list) ds_list_destroy(Path);
if ds_exists(Script, ds_type_list) ds_list_destroy(Script);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(obj_editor) exit;
if instance_exists(obj_message_box) exit;
var g = draw_get_colour();
draw_set_colour(c_orange);                         

if id != global.ID shader_set(sh_invert); 
auto_draw_rectangle(x, y, -1, width, height);
if id != global.ID shader_reset();   

draw_set_colour(c_dkgray);     
auto_draw_rectangle(x, y, -1, width, SYM_H); 
draw_set_colour(c_white);
auto_draw_rectangle(x, y, tcircle, SYM_H, SYM_H);
var v = List[| 0];
if is_undefined(v) exit;
v = string_replace_all(v, chr(13), " ");
v = string_replace_all(v, chr(35), " ");
draw_set_colour(c_orange);
draw_text(x + SYM_H, y, string_cut_end(v, count)); 
var xx = x + count * SYM_W;
var xxx = xx + SYM_H;
draw_set_colour(c_white);
auto_draw_rectangle(xx, y, tkill_self, SYM_H, SYM_H);
if kill draw_set_colour(c_red);
auto_draw_rectangle(xxx, y, tkill_child, SYM_H, SYM_H);
draw_set_colour(c_white);
var h = SYM_H &gt;&gt; 1;
var _y;
var s = "";

for (var i = 1; i &lt; Size; i++)
{ _y = y + SYM_H * i;
  v = List[| i];
  if is_undefined(v) continue;
  v = string_replace_all(v, chr(13), " ");
  v = string_replace_all(v, chr(35), " ");  
  draw_set_colour(c_white);  
  if Size &gt; 2 auto_draw_rectangle(xx, _y, txplus, SYM_H, SYM_H);   
  auto_draw_rectangle(xxx, _y, tcircle, SYM_H, SYM_H);                    
  s += string_cut_end(v, count) + "#";
  v = Active[| i];
  if is_undefined(v) continue;   
  var p = Path[| i];
  if is_undefined(p) continue;
               
  if instance_exists(v) 
  { var c = c_ltgray
    if id == global.ID c = c_orange;
    draw_set_colour(c);
    draw_curve(p);
  }
  else
  { Active[| i] = noone;
  
    if path_exists(p) 
       path_clear_points(p);  
  }
}

draw_set_colour(c_black);
draw_text(x, y + SYM_H, s);
draw_set_colour(c_white);
_y = y + SYM_H * Size;
auto_draw_rectangle(xx, _y, tplus, SYM_H, SYM_H);
auto_draw_rectangle(xx + SYM_H, _y, tshift, SYM_H, SYM_H);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
